% ga_sel_caropt.m
% ag para hacer la seleccion de caracteristicas optimas de la 60 originales
% de la prostata
% sga
% This script implements the Simple Genetic Algorithm described
% in the examples section of the GA Toolbox manual.
% Author:     Andrew Chipperfield
% History:    23-Mar-94     file created


%clear
%NoPM=35;

%************************************************************************
% lectura de las muestras de entrenamiento para el clasificador KNN, K=5
%************************************************************************
% NOMENTRE=[ %'an-u3-14-01-al.con';
% 'an-u3-14-02-al.con';
% %'an-u3-14-03-al.con';
% 'an-u3-14-04-al.con';
% %'an-u3-14-05-al.con';
% %'an-u3-14-06-al.con';
% %'an-u3-15-02-al.con';
% 'an-u3-15-03-al.con';
% %'an-u3-15-04-al.con';
% 'an-u3-15-05-al.con';
% %'an-u3-15-06-al.con';
% 'an-u3-16-03-al.con';
% %'an-u3-16-04-al.con';
% 'an-u3-16-05-al.con';
% %'an-u3-16-06-al.con';
% %'an-u3-16-07-al.con';
% %'an-u3-17-00-al.con';
% 'an-u3-17-05-al.con';
% %'an-u3-18-00-al.con';
% %'an-u3-18-01-al.con';
% 'an-u3-18-02-al.con';
% 'an-u3-18-03-al.con';
% 'an-u3-18-04-al.con';
% %'an-u3-18-05-al.con';
% ];

%NOMENTRE=[ 
% 'an-u3-14-02-al.con';
%'an-u3-18-04-al.con';
% 'an-u3-15-03-al.con';
% 'an-u3-16-03-al.con';
% 'an-u3-15-05-al.con';
% 'an-u3-16-05-al.con';
% 'an-u3-17-05-al.con';
% 'an-u3-14-04-al.con';
%];
%[renentre, colentre]=size(NOMENTRE);
%renval=ceil(renentre/2); % separamos (renentre-renval) archivos para enterenamiento y (renval) archivos para validacion
%rentotal=renentre;
%figure
%axis equal
%hold on

%for imagen=1:renentre % repetimos el ciclo para todos los archivos
%   name=NOMENTRE(imagen,:);
%   name=name(4:11);
%   name=strcat('v5x5_60car_', name, '.txt');
%   fid=fopen(name, 'r');
%	for j=1:35
%		L=fscanf(fid, '%c',20);
%		LN=fscanf(fid, '%d\n',1);
%			for i=1:25
%				P=fscanf(fid, '%c',6);
% 				PN=fscanf(fid, '%d\n',1);
% 				P=fscanf(fid, '%c\n',24);
% 				IO((j-1)*25+i, imagen)=fscanf(fid, '%d\n',1);
% 				CAR=fscanf(fid, '%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \n', 60);
% 				MUE_ENTRE((j-1)*25+i,:, imagen)=CAR';
% 			end
% 	end
% 	fclose(fid);
% end % for imagen=1:renentre

[fileImages, pathImages, wtv] = uigetfile('*.bmp','Load Images','MultiSelect', 'on');

if ischar(fileImages)
    nImages = 1;
else
    [wtv nImages] = size(fileImages);
end

[fileTumors, pathTumors, wtv] = uigetfile('*.mat','Load Tumor Segmentation');

tumorsFilename = strcat(pathTumors,fileTumors);
 
tumors = load(tumorsFilename);
tumors = tumors.tumors;
[fileBackgrounds, pathBackgrounds, wtv] = uigetfile('*.mat','Load Background Segmentation');

 
backgroundsFilename = strcat(pathBackgrounds,fileBackgrounds);
 
backgrounds = load(backgroundsFilename);
backgrounds = backgrounds.backgrounds;

nOfSamples = 0;

histPath = 'C:/Users/Public/Documents/Breast Tumor Segmentation/Tumor Segmentation Matlab/Resultados/Homogeneous/Imagenes/Histogram/';
haralickPath = 'C:/Users/Public/Documents/Breast Tumor Segmentation/Tumor Segmentation Matlab/Resultados/Homogeneous/Imagenes/Haralick/';
runPath = 'C:/Users/Public/Documents/Breast Tumor Segmentation/Tumor Segmentation Matlab/Resultados/Homogeneous/Imagenes/RunLength/';

for i=1:nImages
   
   imDif = imread(strcat(histPath,fileImages{i}(1:end-4),'_Diferencia.bmp')); 
   imEnt = imread(strcat(histPath,fileImages{i}(1:end-4),'_Entropia.bmp'));
   imKurt = imread(strcat(histPath,fileImages{i}(1:end-4),'_Kurtosis.bmp'));
   imMedia = imread(strcat(histPath,fileImages{i}(1:end-4),'_Media.bmp'));
   imSkew = imread(strcat(histPath,fileImages{i}(1:end-4),'_Skewness.bmp'));
   imStd = imread(strcat(histPath,fileImages{i}(1:end-4),'_Std.bmp'));
   imCont = imread(strcat(haralickPath,fileImages{i}(1:end-4),'_Contrast.bmp'));
   imCorrel = imread(strcat(haralickPath,fileImages{i}(1:end-4),'_Correlation.bmp'));
   imEnergy = imread(strcat(haralickPath,fileImages{i}(1:end-4),'_Energy.bmp'));
   imHomo = imread(strcat(haralickPath,fileImages{i}(1:end-4),'_Homogeneity.bmp'));
   imVar = imread(strcat(haralickPath,fileImages{i}(1:end-4),'_Variance.bmp'));
   imGLN = imread(strcat(runPath,fileImages{i}(1:end-4),'_GLN.bmp'));
   imHGRE = imread(strcat(runPath,fileImages{i}(1:end-4),'_HGRE.bmp'));
   imLGRE = imread(strcat(runPath,fileImages{i}(1:end-4),'_LGRE.bmp'));
   imLRE = imread(strcat(runPath,fileImages{i}(1:end-4),'_LRE.bmp'));
   imLRHGE = imread(strcat(runPath,fileImages{i}(1:end-4),'_LRHGE.bmp'));
   imLRLGE = imread(strcat(runPath,fileImages{i}(1:end-4),'_LRLGE.bmp'));
   imRLN = imread(strcat(runPath,fileImages{i}(1:end-4),'_RLN.bmp'));
   imRP = imread(strcat(runPath,fileImages{i}(1:end-4),'_RP.bmp'));
   imSRE = imread(strcat(runPath,fileImages{i}(1:end-4),'_SRE.bmp'));
   imSRHGE = imread(strcat(runPath,fileImages{i}(1:end-4),'_SRHGE.bmp'));
   imSRLGE = imread(strcat(runPath,fileImages{i}(1:end-4),'_SRLGE.bmp'));
   
   tumor = tumors{i};
   tumorSize = size(tumor);
   nOfTumorPix = (tumorSize(1)*tumorSize(2)*10)/100;
  
   tumorSample = datasample(tumor,nOfTumorPix);
   
   background = backgrounds{i};
   backgroundSize = size(background);
   nOfBackPix = (backgroundSize(1)*backgroundSize(2)*10)/100;
   
   backgroundSample = datasample(background,nOfBackPix);
   
   for j=1:nOfTumorPix
       
       nOfSamples = nOfSamples + 1;
       pix = tumorSample(j);
       CAR = [imDif(pix) imEnt(pix) imKurt(pix) imMedia(pix) imSkew(pix) imStd(pix) imCont(pix) imCorrel(pix) imEnergy(pix) imHomo(pix) imVar(pix) imGLN(pix) imHGRE(pix) imLGRE(pix) imLRE(pix) imLRHGE(pix) imLRLGE(pix) imRLN(pix) imRP(pix) imSRE(pix) imSRHGE(pix) imSRLGE(pix)];
       
       
       
   end
       
    
end

%****************************************************************************
%***********  ALGORITMO GENETICO PA' SELECCION OPTIMA *******************

NIND = 10;           % Number of individuals per subpopulations
MAXGEN =5;        % maximum Number of generations
GGAP = .9;           % Generation gap, how many new individuals are created
NVAR = 60;           % 60 bits on/off indican si la xi correspondiente sera evaluada


% Initialise population
   Chrom = crtbp(NIND, NVAR);

% Reset counters
   Best = NaN*ones(MAXGEN,1);	% best in current population
   gen = 0;			% generational counter

% Evaluate initial population
   ObjV = error_knn_optimas(MUE_ENTRE, renval, rentotal, IO, Chrom);

% Track best individual and display convergence
   Best(gen+1) = min(ObjV)
   plot(log10(Best),'ro');xlabel('generation'); ylabel('log10(f(x))');
   text(0.5,0.95,['Best = ', num2str(Best(gen+1))],'Units','normalized');   
   drawnow;        


% Generational loop
   while gen < MAXGEN,

    % Assign fitness-value to entire population
       FitnV = ranking(ObjV);

    % Select individuals for breeding
       SelCh = select('sus', Chrom, FitnV, GGAP);

    % Recombine selected individuals (crossover)
       SelCh = recombin('xovsp',SelCh,0.7);

    % Perform mutation on offspring
       SelCh = mut(SelCh);

    % Evaluate offspring, call objective function
       ObjVSel = error_knn_optimas(MUE_ENTRE, renval, rentotal, IO, SelCh);

    % Reinsert offspring into current population
       [Chrom ObjV]=reins(Chrom,SelCh,1,1,ObjV,ObjVSel);

    % Increment generational counter
       gen = gen+1;

    % Update display and record current best individual
       Best(gen+1) = min(ObjV)
       plot(log10(Best),'ro'); xlabel('generation'); ylabel('log10(f(x))');
       text(0.5,0.95,['Best = ', num2str(Best(gen+1))],'Units','normalized');
       drawnow;
   end 
% End of GA

%  save 'mejor_pob_1804.txt' Chrom -ASCII
%  save 'mejores_fobj_1804.txt' ObjV -ASCII